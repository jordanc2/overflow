@startuml
title Update Client

actor Client
participant "API Gateway" as APIGateway
participant Lambda
participant UpdateClientActivity
participant ClientDao
database clients

Client -> APIGateway : POST/clients/clientId
activate Client
APIGateway -> Lambda
activate Lambda
activate UpdateClientActivity
activate ClientDao
Lambda -> UpdateClientActivity : handleRequest(UpdateClientRequest, Context)
UpdateClientActivity -> ClientDao : getClient(clientId)
ClientDao -> clients : load client by ID

alt if client ID does not exist
 ClientDao <-- clients : null
 Lambda <-- ClientDao : throw new ClientNotFoundException
 APIGateway <-- Lambda
 Client <-- APIGateway : 400 Response
else otherwise, continue
end

ClientDao <-- clients : Client
UpdateClientActivity <-- ClientDao : return Client object
UpdateClientActivity -> UpdateClientActivity : validate client ID matches request

alt if client ID does not match
 Lambda <-- UpdateClientActivity : throw new InvalidAttributeChangeException
 APIGateway <-- Lambda
 Client <-- APIGateway : 400 Response
else otherwise, continue
end

UpdateClientActivity -> UpdateClientActivity : update Client
UpdateClientActivity -> ClientDao : saveClient(Client)
ClientDao -> clients : store Client
ClientDao <-- clients : return Client
UpdateClientActivity <-- ClientDao : return updated Client object
Lambda <-- UpdateClientActivity : UpdateClientResult
APIGateway <-- Lambda
deactivate ClientDao
deactivate UpdateClientActivity
deactivate Lambda
Client <-- APIGateway : 200 Response
deactivate Client
@enduml